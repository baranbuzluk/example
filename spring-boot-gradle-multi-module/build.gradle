import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.diffplug.spotless' version '5.0.0'
    id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

repositories {
    gradlePluginPortal()
    mavenCentral()
}

group = 'com.github.baranbuzluk'
version = '0.0.1-SNAPSHOT'


tasks.named("spotlessApply") {
    subprojects.forEach { dependsOn("${it.name}:spotlessApply") }
}

tasks.named("spotlessCheck") {
    subprojects.forEach { dependsOn("${it.name}:spotlessApply") }
}

subprojects() {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'com.bmuschko.docker-remote-api'

    java {
        sourceCompatibility = '17'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        runtimeOnly 'org.postgresql:postgresql'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    spotless {
        java {
            target fileTree('.') {
                include '**/*.java'
                exclude '**/build/**', '**/build-*/**'
            }
            eclipse()
            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
        }
        groovyGradle {
            target fileTree('.') {
                include '**/*.gradle'
                exclude '**/build/**', '**/build-*/**'
            }
            greclipse()
            indentWithSpaces(4)
            trimTrailingWhitespace()
            endWithNewline()
        }
    }


    tasks.named('test') {
        useJUnitPlatform()
    }
}
